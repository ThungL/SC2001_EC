import random
import time

def generateRandomDatasets(array_size):
        arr = []
        for i in range(array_size):
            arr.append(random.randint(1, array_size))
        return arr

def insertionsort(arr, start, end):
    global key_comparisons
    if end - start <= 0:  # trivially sorted in this case
        return 0

    for i in range(start + 1, end + 1):
        key = arr[i]  # key being inserted

        j = i - 1
        while j >= start:
            if key < arr[j]:
                key_comparisons += 1
                arr[j + 1] = arr[j]
                j -= 1
            else:
                key_comparisons += 1
                break

        arr[j + 1] = key


def hybridsort(arr, start, end, s):
    if end - start + 1 <= s:
        insertionsort(arr, start, end)
        return

    mid = int((start+end)/2)
    hybridsort(arr, start, mid, s)
    hybridsort(arr, mid+1, end, s)
    merge(arr, start, mid, end)



def merge(arr, start, mid, end):
    # create temporary arrays, need only copy the left array, saves a bit on memory
    global key_comparisons
    arr_left = []

    for i in range(start, mid + 1):
        arr_left.append(arr[i])

    size_l = len(arr_left)

    left_count = 0
    right_count = mid + 1
    arr_counter = start

    while left_count < size_l and right_count < end+1:
        if arr_left[left_count] == arr[right_count]:  # if both keys are equal, insert both at the same time
            arr[arr_counter] = arr_left[left_count]
            arr_counter += 1
            left_count += 1

            arr[arr_counter] = arr[right_count]
            arr_counter += 1
            right_count += 1

        elif arr_left[left_count] < arr[right_count]:
            arr[arr_counter] = arr_left[left_count]
            arr_counter += 1
            left_count += 1

        else:
            arr[arr_counter] = arr[right_count]
            arr_counter += 1
            right_count += 1
        key_comparisons += 1

    # insert the remainder of the lists into the overall sorted list
    while left_count < size_l:
        for i in range(left_count, size_l):
            arr[arr_counter] = arr_left[i]
            arr_counter += 1
            left_count += 1

    while right_count < end+1:
        for i in range(right_count, end+1):
            arr[arr_counter] = arr[i]
            arr_counter += 1
            right_count += 1
# main


arrSize = 100000
boundedS = 100
final_tList = []
final_cList = []
for i in range(1, boundedS + 1):
    s = i
    num_repetitions = 5
    tList = []
    cList = []
    while num_repetitions > 0:
        key_comparisons = 0
        arr = generateRandomDatasets(arrSize)
        start = time.time()
        hybridsort(arr, 0, arrSize - 1, s)
        end = time.time()
        time_taken = end - start
        tList.append(time_taken)
        cList.append(key_comparisons)
        print(f"number of comparisons, {5 - num_repetitions + 1}th time: {key_comparisons}")
        num_repetitions -= 1
    ave_key_comparisons = sum(cList) / len(cList)
    ave_time_taken = sum(tList)/len(tList)
    final_tList.append(ave_time_taken)
    final_cList.append(ave_key_comparisons)
    print(f"S = {i}, average key comparisons : {ave_key_comparisons}, average time taken : {ave_time_taken}")

print(final_cList)
print(final_tList)
